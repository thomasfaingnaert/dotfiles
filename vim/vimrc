" --------------------------------------------------------------------------------
" Plugin list
" --------------------------------------------------------------------------------

call plug#begin()

Plug 'tomasiser/vim-code-dark'

if has('python3')
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
endif

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'

Plug 'lervag/vimtex'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'

Plug 'markonm/traces.vim'

Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'thomasfaingnaert/vim-lsp-snippets'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'

Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'JuliaEditorSupport/julia-vim'
Plug 'rhysd/vim-llvm'

call plug#end()

" --------------------------------------------------------------------------------
" General settings
" --------------------------------------------------------------------------------

"" Setup
" Load matchit
if !has('nvim') | packadd! matchit | endif

" Enable filetype support and syntax highlighting
filetype plugin indent on
syntax enable

"" GUI options
colorscheme codedark

if has('gui_running')
    " Only set guifont once, since it resizes gVim when sourcing $MYVIMRC
    if !exists('s:set_guifont')
        let s:set_guifont = 1

        if has('win32')
            set guifont=Consolas:h11
        else
            set guifont=Ubuntu\ Mono\ Regular\ 18
        endif
    endif

    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

"" System-dependent settings
if !exists('s:myruntime')
    let s:myruntime = split(&runtimepath, ',')[0]
end

let &backupdir = s:myruntime . '/cache/backup//'
let &directory = s:myruntime . '/cache/swap//'
let &undodir = s:myruntime . '/cache/undo//'

"" Line numbers
set relativenumber
set number

"" Indentation
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set shiftround

"" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Statusline
set laststatus=2

set statusline=                             " clear statusline for when vimrc is reloaded
set statusline+=%f                          " path to file in the buffer
set statusline+=%(\ %h%)                    " help flag: [Help] or empty
set statusline+=%(\ %m%)                    " modified flag: [+] or [-] or empty
set statusline+=%(\ %r%)                    " readonly flag: [RO] or empty
set statusline+=%(\ (%{fugitive#head()})%)  " current branch
set statusline+=%=                          " right align
set statusline+=\ Line:\ %l/%L              " current line and total number of lines
set statusline+=\ Col:\ %c                  " column number

"" Other
set encoding=utf-8
set listchars=eol:¬,tab:▸\ ,trail:·,precedes:←,extends:→
set backspace=indent,eol,start
set wildmenu
set wildcharm=<C-z>
set formatoptions+=j
set hidden
set lazyredraw
set autoread
set showcmd
set spelllang=en_gb
set nrformats-=octal
set path=.,,**
set nojoinspaces
set isfname-==

" This fixes netrw-gx and :Gbrowse not working in gVim
if has('unix')
    let g:netrw_browsex_viewer='setsid xdg-open'
endif

" Set shell to cmd.exe (this is needed to use gVim as difftool in Windows)
if has('win32')
    set shell=C:\WINDOWS\system32\cmd.exe
endif

"" Set wildignore
set wildignore+=*/build/*

" --------------------------------------------------------------------------------
" Plugin settings
" --------------------------------------------------------------------------------

"" UltiSnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetsDir = (has('win32') ? '~/dotfiles' : '~/.dotfiles') . '/vim/UltiSnips'

"" vim-tex
" Use LaTeX by default
let g:tex_flavor = 'latex'

" Use SumatraPDF in Windows
if has('win32')
    let g:vimtex_view_general_viewer = 'SumatraPDF'
    let g:vimtex_view_general_options
                \ = '-reuse-instance -forward-search @tex @line @pdf'
                \ . ' -inverse-search "' . $VIMRUNTIME . '\gvim.exe --servername ' . v:servername
                \ . ' --remote-silent +\%l \%f"'
    let g:vimtex_view_general_options_latexmk = '-reuse-instance'
endif

"" vim-sandwich
" I prefer vim-surround keymappings
runtime macros/sandwich/keymap/surround.vim

"" vim-projectionist
let g:projectionist_heuristics = {
            \   'include/*.h|src/*.cpp': {
            \       'include/*.h': {
            \           'alternate': 'src/{}.cpp',
            \           'type': 'header'
            \       },
            \       'src/*.cpp': {
            \           'alternate': 'include/{}.h',
            \           'type': 'source'
            \       }
            \   },
            \   '*.h&*.cpp': {
            \       '*.h': {
            \           'alternate': '{}.cpp',
            \           'type': 'header'
            \       },
            \       '*.cpp': {
            \           'alternate': '{}.h',
            \           'type': 'source'
            \       }
            \   }}

"" vim-lsp
" Don't show diagnostics highlight
let g:lsp_textprop_enabled = 0

"" vim-easy-align
let g:easy_align_delimiters = {
            \ '\': {
            \   'pattern': '\\$'
            \ }
            \ }

" --------------------------------------------------------------------------------
" Mappings
" --------------------------------------------------------------------------------

"" Allow undoing C-u and C-w in insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

"" Window navigation and movement
nnoremap <silent> <C-h> :call window_move#window_move('h')<CR>
nnoremap <silent> <C-j> :call window_move#window_move('j')<CR>
nnoremap <silent> <C-k> :call window_move#window_move('k')<CR>
nnoremap <silent> <C-l> :call window_move#window_move('l')<CR>

nnoremap <C-M-h> <C-w>H
nnoremap <C-M-j> <C-w>J
nnoremap <C-M-k> <C-w>K
nnoremap <C-M-l> <C-w>L

"" Move lines up and down
nnoremap <silent> <A-j> :move +1<CR>==
nnoremap <silent> <A-k> :move -2<CR>==

inoremap <silent> <A-j> <Esc>:move +1<CR>==gi
inoremap <silent> <A-k> <Esc>:move -2<CR>==gi

xnoremap <silent> <A-j> :move '>+1<CR>gv=gv
xnoremap <silent> <A-k> :move '<-2<CR>gv=gv

"" Quickly switch between alternate files
nnoremap <expr> <BS> exists(':A') ? ':A<CR>' : '<C-^>'

"" Increase and reset font size
nmap <M-+> <Plug>font_size_increase
nmap <M--> <Plug>font_size_decrease
nmap <M-=> <Plug>font_size_reset

"" Set font size
nnoremap <silent> yof :set guifont=*<CR>

"" Make
nmap <F7> <Plug>quick_run

"" Commandline
" Prev/next match during incremental search
cnoremap <expr> <Tab>   getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<C-g>' : '<C-z>'
cnoremap <expr> <S-Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<C-t>' : '<S-Tab>'

" Emacs-style command-line editing
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

"" Leader
let mapleader = ' '
let maplocalleader = '\'

nnoremap <silent> <leader>  <Nop>
nnoremap <silent> <leader>= :call preserve_state#execute("silent normal! gg=G")<CR>:redraw!<CR>
nnoremap <silent> <leader>c :lcd %:h<CR>
nnoremap <silent> <leader>e :browse edit<CR>
nnoremap <silent> <leader>h :nohlsearch<CR>
nnoremap <silent> <leader>l :set list!<CR>
nnoremap <silent> <leader>t :terminal<CR>
nmap     <silent> <leader>u <Plug>underline_above
nmap     <silent> <leader>U <Plug>underline_below
nmap     <silent> <leader>v <Plug>edit_vimrc
nnoremap <silent> <leader>w :if filereadable(expand('%')) <Bar> update <Bar> else <Bar> write <Bar> endif<CR>
nnoremap <silent> <leader>y :call preserve_state#execute('silent normal! gg"+yG')<CR>

" Deselect selected wildmenu option, if any
cnoremap <expr> <SID>deselect_wildmenu_option wildmenumode() ? "\<S-Tab>" : ""

nmap <leader>b :ls<CR>:buffer <C-z><SID>deselect_wildmenu_option
nmap <leader>s :ls<CR>:vert sbuffer <C-z><SID>deselect_wildmenu_option
nmap <leader>d :ls<CR>:bdelete <C-z><SID>deselect_wildmenu_option

"" Fugitive
nnoremap <silent> <leader>gb :Gbrowse<CR>
nnoremap <silent> <leader>gc :Glcd<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gp :Gpush<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>

"" Operators
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

nmap gr <Plug>operator_grep
xmap gr <Plug>operator_grep

nmap gs <Plug>operator_sort
xmap gs <Plug>operator_sort

nmap Q <Plug>operator_format_paragraph
xmap Q <Plug>operator_format_paragraph

nmap <Space><Space> <Plug>operator_quick_replace
xmap <Space><Space> <Plug>operator_quick_replace

"" Textobjects
xmap ad <Plug>textobj_document_a
omap ad <Plug>textobj_document_a
xmap id <Plug>textobj_document_i
omap id <Plug>textobj_document_i

xmap al <Plug>textobj_line_a
omap al <Plug>textobj_line_a
xmap il <Plug>textobj_line_i
omap il <Plug>textobj_line_i

"" Insert mode pairs
imap <C-l> <Plug>insert_match

"" Clipboard toggle (clipboard+=unnamedplus)
command! ClipboardToggle
            \   if &clipboard =~# 'unnamedplus' |
            \       set clipboard-=unnamedplus |
            \   else |
            \       set clipboard+=unnamedplus |
            \   endif

" --------------------------------------------------------------------------------
" Autocommands
" --------------------------------------------------------------------------------

"" Automatically strip whitespace
augroup strip_whitespace
    autocmd!
    autocmd BufWritePre * call preserve_state#execute("%s/\\s\\+$//e")
augroup end

"" Customize popup window colours
augroup lsp_float_colours
    autocmd!
    if !has('nvim')
        autocmd User lsp_float_opened call win_execute(lsp#ui#vim#output#getpreviewwinid(), 'setlocal wincolor=PopupWindow')
    else
        autocmd User lsp_float_opened call nvim_win_set_option(lsp#ui#vim#output#getpreviewwinid(), 'winhighlight', 'Normal:PopupWindowDark')
    endif
augroup end

"" Settings for LSP-enabled buffers
function! s:on_lsp_buffer_enabled()
    setlocal omnifunc=lsp#complete
    setlocal keywordprg=:LspHover
    nnoremap <buffer> <C-]> :LspDefinition<CR>
    nnoremap <buffer> <F2> :LspRename<CR>
endfunction

augroup lsp_buffer_settings
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup end
