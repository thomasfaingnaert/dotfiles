" --------------------------------------------------------------------------------
" Plugin list
" --------------------------------------------------------------------------------

call plug#begin()

Plug 'tomasiser/vim-code-dark'

if has('python3')
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
endif

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'

Plug 'lervag/vimtex'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'

Plug 'markonm/traces.vim'

if !has('nvim-0.5.0')
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
    Plug 'thomasfaingnaert/vim-lsp-snippets'
    Plug 'thomasfaingnaert/vim-lsp-ultisnips'
else
    Plug 'neovim/nvim-lspconfig'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'quangnguyen30192/cmp-nvim-ultisnips'

    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-ui-select.nvim'
endif

Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'JuliaEditorSupport/julia-vim'
Plug 'rhysd/vim-llvm'

if has('unix')
    Plug 'heavenshell/vim-pydocstring', { 'do': 'make install', 'for': 'python' }
endif

call plug#end()

" --------------------------------------------------------------------------------
" General settings
" --------------------------------------------------------------------------------

"" Setup
" Load matchit
if !has('nvim') | packadd! matchit | endif

" Enable filetype support and syntax highlighting
filetype plugin indent on
syntax enable

"" GUI options
colorscheme mycodedark

if has('gui_running')
    " Only set guifont once, since it resizes gVim when sourcing $MYVIMRC
    if !exists('s:set_guifont')
        let s:set_guifont = 1

        if has('win32')
            set guifont=Consolas:h11
        else
            set guifont=Cascadia\ Code:h18
        endif
    endif

    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

"" System-dependent settings
if !exists('s:myruntime')
    let s:myruntime = split(&runtimepath, ',')[0]
end

let &backupdir = s:myruntime . '/cache/backup//'
let &directory = s:myruntime . '/cache/swap//'
let &undodir = s:myruntime . '/cache/undo//'

"" Line numbers
set relativenumber
set number

"" Indentation
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set shiftround

"" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Statusline
set laststatus=2

set statusline=                             " clear statusline for when vimrc is reloaded
set statusline+=%f                          " path to file in the buffer
set statusline+=%<                          " truncate after filename, so it is always visible
set statusline+=%(\ %h%)                    " help flag: [Help] or empty
set statusline+=%(\ %m%)                    " modified flag: [+] or [-] or empty
set statusline+=%(\ %r%)                    " readonly flag: [RO] or empty
set statusline+=%(\ (%{FugitiveHead()})%)   " current branch
set statusline+=%=                          " right align
if has('nvim-0.5.0')
    set statusline+=%(\ [%{luaeval('get_diagnostics_statusline()')}]\ %)
                                            " diagnostics
    set statusline+=%(\ [%{luaeval('get_current_lsp_servers()')}]\ %)
                                            " active lsp servers
endif
set statusline+=\ Line:\ %l/%L              " current line and total number of lines
set statusline+=\ Col:\ %c                  " column number

"" Splitting windows
set splitright

"" Other
set encoding=utf-8
set listchars=eol:¬,tab:▸\ ,trail:·,precedes:←,extends:→
set backspace=indent,eol,start
set wildmenu
set wildcharm=<C-z>
set formatoptions+=j
set hidden
set lazyredraw
set autoread
set showcmd
set spelllang=en_gb
set nrformats-=octal
set path=.,,**
set nojoinspaces
set isfname-==
set mouse=a
set termguicolors

" This fixes netrw-gx and :Gbrowse not working in gVim
if has('unix')
    let g:netrw_browsex_viewer='setsid xdg-open'
endif

" Set shell to cmd.exe (this is needed to use gVim as difftool in Windows)
if has('win32')
    set shell=C:\WINDOWS\system32\cmd.exe
endif

" Use ripgrep (if it exists)
if executable('rg')
    set grepprg=rg\ --smart-case\ --vimgrep
endif

" --------------------------------------------------------------------------------
" Plugin settings
" --------------------------------------------------------------------------------

"" UltiSnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetsDir = (has('win32') ? '~/dotfiles' : '~/.dotfiles') . '/vim/UltiSnips'

"" vim-tex
" Use LaTeX by default
let g:tex_flavor = 'latex'

" Use SumatraPDF in Windows
if has('win32')
    let g:vimtex_view_general_viewer = 'SumatraPDF'
    let g:vimtex_view_general_options
                \ = '-reuse-instance -forward-search @tex @line @pdf'
                \ . ' -inverse-search "' . $VIMRUNTIME . '\gvim.exe --servername ' . v:servername
                \ . ' --remote-silent +\%l \%f"'
    let g:vimtex_view_general_options_latexmk = '-reuse-instance'
endif

"" vim-sandwich
" I prefer vim-surround keymappings
runtime macros/sandwich/keymap/surround.vim

"" vim-easy-align
let g:easy_align_delimiters = {
            \ '\': {
            \   'pattern': '\\$'
            \ }
            \ }

"" julia-vim
" Do not use <Tab> for LaTeX2Unicode
let g:latex_to_unicode_tab = 0

"" nvim-lspconfig
if has('nvim-0.5.0')
    lua <<EOF
    local cmp = require('cmp')
    cmp.setup({
        completion = {
            autocomplete = false
        },
        snippet = {
            expand = function(args)
                vim.fn['UltiSnips#Anon'](args.body)
            end
        },
        mapping = {
            ['<C-u>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
            ['<C-d>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
            ['<C-space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c'}),
            ['<C-x><C-o>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c'}),
            ['<C-p>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 'c' }),
            ['<C-n>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 'c' }),
            ['<C-y>'] = cmp.mapping(cmp.mapping.confirm(), { 'i', 'c' }),
            ['<C-e>'] = cmp.mapping(cmp.mapping.abort(), { 'i', 'c' }),
        },
        sources = cmp.config.sources({
            { name = 'nvim_lsp' },
            { name = 'ultisnips' }
        })
    })

    local capabilities = require('cmp_nvim_lsp').default_capabilities()

    local nvim_lsp = require('lspconfig')

    -- Custom LSP attach function
    local lsp_on_attach = function(client, bufnr)
        -- Helper functions
        local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
        local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

        -- Use LSP for formatting
        buf_set_option('formatexpr', 'v:lua.vim.lsp.formatexpr()')

        -- Keymappings
        local opts = { noremap = true, silent = true }
        buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
        buf_set_keymap('n', '<C-]>', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
        buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
        buf_set_keymap('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
        buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
        buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
        buf_set_keymap('n', '<Space>r', '<cmd>Telescope lsp_references<CR>', opts)
        buf_set_keymap('n', '<C-s>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
        buf_set_keymap('i', '<C-s>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
        buf_set_keymap('n', '<Space>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
        buf_set_keymap('n', 'gO', '<cmd>Telescope lsp_document_symbols<CR>', opts)
        buf_set_keymap('n', 'go', '<cmd>Telescope lsp_dynamic_workspace_symbols<CR>', opts)
        buf_set_keymap('n', 'g]', '<cmd>Telescope lsp_definitions<CR>', opts)
        buf_set_keymap('n', 'g<C-]>', '<cmd>Telescope lsp_definitions<CR>', opts)

        if client.server_capabilities.document_formatting then
            buf_set_keymap('n', '<Space>=', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
        end

        -- Show diagnostics in floating window on cursor hold.
        vim.api.nvim_create_autocmd("CursorHold", {
            buffer = bufnr,
            callback = function()
                local opts = {
                    focusable = false,
                    close_events = { "BufLeave", "CursorMoved", "InsertEnter", "FocusLost" },
                    border = 'rounded',
                    source = 'always',
                    prefix = ' ',
                    scope = 'cursor',
                }
                vim.diagnostic.open_float(nil, opts)
            end
        })
    end

    -- Register servers
    local servers = {
        clangd = {},

        pylsp = {},

        texlab = {
            settings = {
                texlab = {
                    build = {
                        forwardSearchAfter = true,
                        onSave = true
                    },

                    forwardSearch = {
                        executable = 'zathura',
                        args = { '--synctex-forward', '%l:1:%f', '%p', '-x', string.format('%s/.dotfiles/nvim/nvim-backward-synctex-helper.sh "%s" "%%{line}" "%%{input}"', os.getenv('HOME'), vim.v.servername) }
                    }
                }
            }
        }
    }

    for server, config in pairs(servers) do
        config = vim.tbl_deep_extend("keep", config, {
            capabilities = capabilities,
            on_attach = lsp_on_attach
        })

        nvim_lsp[server].setup(config)
    end

    require('telescope').setup({
        defaults = {
            mappings = {
                -- Insert mode
                i = {
                    ["<C-a>"] = { "<Home>", type = "command" },
                    ["<C-e>"] = { "<End>", type = "command" }
                }
            },

            -- Swap the order of results, so lower line numbers come first.
            -- This is nice for e.g. current_buffer_fuzzy_find and
            -- lsp_document_symbols, but let's enable it globally for
            -- consistency.
            sorting_strategy = 'ascending',

            -- Show the prompt at the top.
            layout_config = {
                prompt_position = 'top'
            },

            winblend = 10
        },

        pickers = {
            buffers = {
                mappings = {
                    -- Insert mode
                    i = {
                        ["<C-R>"] = require('telescope.actions').delete_buffer
                    }
                }
            }
        }
    })

    require('telescope').load_extension('ui-select')

    -- Return the current LSP servers that are attached to
    -- a buffer.
    -- This function is used in the 'statusline'.
    function get_current_lsp_servers()
        ret = ''
        first = true

        for _, server in pairs(vim.lsp.buf_get_clients()) do
            if not first then
                ret = ret .. ','
            end
            ret = ret .. server.name
            first = false
        end

        return ret
    end

    -- Get a summary of diagnostics for use in the 'statusline'.
    function get_diagnostics_statusline()
        -- Grab diagnostics for all buffers.
        num_errors = #vim.diagnostic.get(nil, { severity = vim.diagnostic.severity.ERROR })
        num_warnings = #vim.diagnostic.get(nil, { severity = vim.diagnostic.severity.WARN })

        if num_errors == 0 and num_warnings == 0 then
            return ''
        else
            return string.format('%d ERR | %d WRN', num_errors, num_warnings)
        end
    end
EOF

    " Use LspDiagnostics to show all diagnostics in the location window.
    command! LspDiagnostics lua vim.diagnostic.setqflist()

    " Underline active parameter in signature help.
    highlight! link LspSignatureActiveParameter Underlined
endif

"" pydocstring
" Use Sphinx formatter by default
let g:pydocstring_formatter = 'sphinx'

" Prevent pydocstring from creating a mapping to :Pydocstring
let g:pydocstring_enable_mapping = 0

"" traces
let g:traces_abolish_integration = 1

" --------------------------------------------------------------------------------
" Mappings
" --------------------------------------------------------------------------------

"" Allow undoing C-u and C-w in insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

"" Window navigation and movement
nnoremap <silent> <C-h> :call window_move#window_move('h')<CR>
nnoremap <silent> <C-j> :call window_move#window_move('j')<CR>
nnoremap <silent> <C-k> :call window_move#window_move('k')<CR>
nnoremap <silent> <C-l> :call window_move#window_move('l')<CR>

nnoremap <C-M-h> <C-w>H
nnoremap <C-M-j> <C-w>J
nnoremap <C-M-k> <C-w>K
nnoremap <C-M-l> <C-w>L

"" Move lines up and down
nnoremap <silent> <A-j> :move +1<CR>==
nnoremap <silent> <A-k> :move -2<CR>==

inoremap <silent> <A-j> <Esc>:move +1<CR>==gi
inoremap <silent> <A-k> <Esc>:move -2<CR>==gi

xnoremap <silent> <A-j> :move '>+1<CR>gv=gv
xnoremap <silent> <A-k> :move '<-2<CR>gv=gv

"" Quickly switch between alternate files
nnoremap <silent> <expr> <BS> exists(':ClangdSwitchSourceHeader') ? ':ClangdSwitchSourceHeader<CR>' : '<C-^>'

"" Increase and reset font size
nmap <M-+> <Plug>font_size_increase
nmap <M--> <Plug>font_size_decrease
nmap <M-=> <Plug>font_size_reset

"" Set font size
nnoremap <silent> yof :set guifont=*<CR>

"" Make
nmap <F7> <Plug>quick_run

"" Commandline
" Prev/next match during incremental search
cnoremap <expr> <Tab>   getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<C-g>' : '<C-z>'
cnoremap <expr> <S-Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<C-t>' : '<S-Tab>'

" Emacs-style command-line editing
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

"" Leader
let mapleader = ' '
let maplocalleader = '\'

nnoremap <silent> <leader>  <Nop>
nnoremap <silent> <leader>= :call preserve_state#execute("silent normal! gg=G")<CR>:redraw!<CR>
nnoremap <silent> <leader>c :lcd %:h<CR>
nnoremap <silent> <leader>e :browse edit<CR>
nnoremap <silent> <leader>h :nohlsearch<CR>
nnoremap <silent> <leader>l :set list!<CR>
if has('nvim')
    nnoremap <silent> <leader>t :split<CR>:terminal<CR>:startinsert<CR>
else
    nnoremap <silent> <leader>t :terminal<CR>
endif
nmap     <silent> <leader>u <Plug>underline_above
nmap     <silent> <leader>U <Plug>underline_below
nmap     <silent> <leader>v <Plug>edit_vimrc
nnoremap <silent> <leader>w :if filereadable(expand('%')) <Bar> update <Bar> else <Bar> write <Bar> endif<CR>
nnoremap <silent> <leader>y :call preserve_state#execute('silent normal! gg"+yG')<CR>

if has('nvim-0.5.0')
    nnoremap <leader>f <cmd>Telescope builtin<CR>

    nnoremap <leader>b <cmd>Telescope buffers<CR>
    nnoremap <C-g> <cmd>Telescope live_grep<CR>
    nnoremap <C-p> <cmd>Telescope find_files<CR>
    " NOTE: This actually maps <C-/>
    nnoremap <C-_> <cmd>Telescope current_buffer_fuzzy_find<CR>
else
    " Deselect selected wildmenu option, if any
    cnoremap <expr> <SID>deselect_wildmenu_option wildmenumode() ? "\<S-Tab>" : ""
    nmap <leader>b :ls<CR>:buffer <C-z><SID>deselect_wildmenu_option
endif

"" Fugitive
nnoremap <silent> <leader>gb :GBrowse<CR>
nnoremap <silent> <leader>gc :Glcd<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gs :Git<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>

"" Operators
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

nmap gr <Plug>operator_grep
xmap gr <Plug>operator_grep

nmap gs <Plug>operator_sort
xmap gs <Plug>operator_sort

nmap Q <Plug>operator_format_paragraph
xmap Q <Plug>operator_format_paragraph

nmap <Space><Space> <Plug>operator_quick_replace
xmap <Space><Space> <Plug>operator_quick_replace

"" Textobjects
xmap ad <Plug>textobj_document_a
omap ad <Plug>textobj_document_a
xmap id <Plug>textobj_document_i
omap id <Plug>textobj_document_i

xmap al <Plug>textobj_line_a
omap al <Plug>textobj_line_a
xmap il <Plug>textobj_line_i
omap il <Plug>textobj_line_i

"" Insert mode pairs
imap <C-l> <Plug>insert_match

"" Clipboard toggle (clipboard+=unnamedplus)
command! ClipboardToggle
            \   if &clipboard =~# 'unnamedplus' |
            \       set clipboard-=unnamedplus |
            \   else |
            \       set clipboard+=unnamedplus |
            \   endif

"" Show TODOs
if executable('rg')
    command! TODOs
                \   copen |
                \   grep -F 'TODO' . |
                \   grepadd -F 'FIXME' . |
                \   grepadd -F '\bds{' . |
                \   grepadd -F '\tf{' . |
                \   grepadd -F '\todo{' .
else
    command! TODOs
                \   copen |
                \   grep --exclude-dir=.git -rF 'TODO' . |
                \   grepadd --exclude-dir=.git -rF 'FIXME' .
endif

"" Add diagnostics to quickfix
command! DiagnosticsToQflist lua vim.diagnostic.setqflist()
command! DiagnosticsToLoclist lua vim.diagnostic.setloclist()

"" Highlight text between two patterns
function! s:highlight_between()
    let l:from = input("From pattern: ")
    let l:to = input("To pattern: ")

    let @/ = l:from . '\_.\{-}' . l:to
    set hlsearch
    normal! gg
    normal! n
endfunction
command! HighlightBetween call s:highlight_between()

" --------------------------------------------------------------------------------
" Autocommands
" --------------------------------------------------------------------------------

"" Automatically strip whitespace
augroup strip_whitespace
    autocmd!
    autocmd BufWritePre * if &filetype != "diff" | call preserve_state#execute("%s/\\s\\+$//e") | endif
augroup end

"" Customize popup window colours
augroup lsp_float_colours
    autocmd!
    if !has('nvim')
        autocmd User lsp_float_opened call win_execute(lsp#ui#vim#output#getpreviewwinid(), 'setlocal wincolor=PopupWindow')
    else
        autocmd User lsp_float_opened call nvim_win_set_option(lsp#ui#vim#output#getpreviewwinid(), 'winhighlight', 'Normal:PopupWindowDark')
    endif
augroup end

"" Settings for LSP-enabled buffers
function! s:on_lsp_buffer_enabled()
    setlocal omnifunc=lsp#complete
    setlocal keywordprg=:LspHover
    nnoremap <buffer> <C-]> :LspDefinition<CR>
    nnoremap <buffer> <F2> :LspRename<CR>
endfunction

augroup lsp_buffer_settings
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup end
