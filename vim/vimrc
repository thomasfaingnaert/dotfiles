" Plugin list
call plug#begin()

Plug 'iCyMind/NeoSolarized'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

Plug 'lervag/vimtex'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'

call plug#end()

" Load matchit
runtime macros/matchit.vim

" I prefer vim-surround keymappings
runtime macros/sandwich/keymap/surround.vim

" Enable filetype support and syntax highlighting
filetype plugin indent on
syntax enable

" GUI options
if has('gui_running')
    set background=light
    colorscheme NeoSolarized

    if has('win32')
        set guifont=Consolas:h11
    else
        set guifont=Monospace\ 11
    endif

    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

" Change directories of temporary files
if !exists('g:myruntime')
    let g:myruntime=split(&rtp, ',')[0]
end

let &backupdir=g:myruntime . '/backup//'
let &directory=g:myruntime . '/swap//'
let &undodir=g:myruntime . '/undo//'

" Line number settings
set relativenumber
set number

" Sane backspace settings
set backspace=indent,eol,start

" Indent settings
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent

" Use 2 spaces in Ruby
augroup ruby_indentation
    autocmd!
    autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2
augroup end

" Required to show custom list symbols
set encoding=utf-8

" Change symbols for invisible characters
set listchars=eol:¬,tab:▸\ ,trail:·,precedes:←,extends:→

" Mappings for easier window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Set leader to space
let mapleader=" "

" Set localleader to \
let maplocalleader="\\"

" Leader mappings
nnoremap <leader>e :browse edit<CR>
nnoremap <leader>w :write<CR>
nnoremap <leader>r :source $MYVIMRC<CR>
nnoremap <leader>l :set list!<CR>
nnoremap <leader>h :set hlsearch!<CR>
nnoremap <leader>= :call <SID>Preserve("normal gg=G")<CR>
nnoremap <leader>b :buffer <C-z><S-Tab>
nnoremap <leader>d :ls<CR>:bd<SPACE>
nnoremap <leader>c :lcd %:h<CR>
nnoremap <leader>s :set spell!<CR>:set spell?<CR>

if has ('win32')
    nnoremap <leader>v :edit ~/dotfiles/vim/vimrc<CR>
else
    nnoremap <leader>v :edit ~/.dotfiles/vim/vimrc<CR>
endif

" Fugitive mappings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gc :Glcd<CR>

" Easy align mappings
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" Make mapping
nnoremap <F7> :make<CR>

" Function to set make mappings correctly
function! SetMakeMappings()
    " Check if a file named "Makefile" exists in the directory of the current
    " buffer
    if filereadable(expand("%:p:h") . "/Makefile")
        set makeprg=make
        nnoremap <F5> :make debug<CR>
        nnoremap <F6> :make run<CR>
    else
        if has('win32')
            set makeprg=build-system\build
            nnoremap <F5> :make<CR>:silent !build-system\debug<CR>
            nnoremap <F6> :make<CR>:silent !build-system\run<CR>
        else
            set makeprg=./build-system/build.sh
            nnoremap <F5> :make<CR>:silent !./build-system/debug.sh<CR>
            nnoremap <F6> :make<CR>:silent !./build-system/run.sh<CR>
        end
    endif
endfunction

" Update make mappings autocmd
augroup update_make_mappings
    autocmd!
    autocmd BufWinEnter * call SetMakeMappings()
augroup end

" Function to preserve "state" and execute command
" (Source: http://vimcasts.org/episodes/tidying-whitespace/)
function! <SID>Preserve(command)
    let l:win_view = winsaveview()
    let l:last_search = getreg('/')
    execute 'keepjumps ' . a:command
    call winrestview(l:win_view)
    call setreg('/', l:last_search)
endfunction

" Automatically strip whitespace when saving file
augroup strip_whitespace
    autocmd!
    autocmd BufWritePre * :call<SID>Preserve("%s/\\s\\+$//e")
augroup end

" When searching, show where the pattern typed so far matches
set incsearch

" Always display statusline
set laststatus=2

" Configure statusline
set statusline=                             " clear statusline for when vimrc is reloaded
set statusline+=%f                          " path to file in the buffer
set statusline+=%(\ %h%)                    " help flag: [Help] or empty
set statusline+=%(\ %m%)                    " modified flag: [+] or [-] or empty
set statusline+=%(\ %r%)                    " readonly flag: [RO] or empty
set statusline+=%(\ (%{fugitive#head()})%)  " current branch
set statusline+=%=                          " right align
set statusline+=\ Line:\ %l/%L              " current line and total number of lines
set statusline+=\ Col:\ %c                  " column number

" Enable enhanced command-line completion
set wildmenu

" Show at least 5 lines and columns around cursor
set scrolloff=5
set sidescrolloff=5

" Delete comment character when joining commented lines
set formatoptions+=j

" Don't automatically continue comment when pressing enter
augroup no_continue_comment
    autocmd!
    autocmd FileType * setlocal formatoptions-=r
augroup end

" Set shell to cmd.exe (this is needed to use gVim as difftool in Windows)
if has('win32')
    set shell=C:\WINDOWS\system32\cmd.exe
endif

" Allow undoing C-u and C-w in insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Allow hiding buffers with unsaved changes
set hidden

" Don't update the display while executing macros
set lazyredraw

" UltiSnips configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" Ignore case when searching...
set ignorecase

" ... except when the pattern contains uppercase letters
set smartcase

" When a file has changed outside of Vim, and it has not changed inside of
" Vim, automatically read it again
set autoread

" Use LaTeX by default
let g:tex_flavor="latex"

" Don't automatically open/close the quickfix window in tex files
" When using autowrite and latexmk pvc, it is annoying and it breaks
" UltiSnips
let g:vimtex_quickfix_mode=0

" Use SumatraPDF in Windows
if has('win32')
    let g:vimtex_view_general_viewer='SumatraPDF'
    let g:vimtex_view_general_options
                \ = '-reuse-instance -forward-search @tex @line @pdf'
                \ . ' -inverse-search "' . $VIMRUNTIME . '\gvim.exe --servername ' . v:servername
                \ . ' --remote-silent +\%l \%f"'
    let g:vimtex_view_general_options_latexmk='-reuse-instance'
endif

" Autowrite LaTeX files, if compiler is active
function! AutowriteLatex()
    if filereadable(expand('%')) && b:vimtex.compiler.is_running()
        execute "silent update"
    endif
endfunction

augroup autowrite_latex_files
    autocmd!
    autocmd FileType tex :autocmd! autowrite_latex_files TextChanged,TextChangedI <buffer> call AutowriteLatex()
augroup end

" Local overrides
if filereadable($HOME . "/.vimrc.local")
    execute "source " . $HOME . "/.vimrc.local"
endif

" Use British English by default for spell checking
set spelllang=en_gb

