" Plugin list
call plug#begin()

Plug 'icymind/NeoSolarized'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

Plug 'lervag/vimtex'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'

Plug 'Rip-Rip/clang_complete'
Plug 'vim-scripts/DoxygenToolkit.vim'

call plug#end()

" I prefer vim-surround keymappings
runtime macros/sandwich/keymap/surround.vim

" Enable filetype detection, plugins and indent files
filetype plugin indent on

" Enable syntax highlighting
syntax enable

if has('gui_running')
    " Use solarized light
    set background=light
    colorscheme NeoSolarized

    " Set guifont
    if has('win32')
        set guifont=Consolas:h11
    else
        set guifont=Hack\ 11
    endif

    " Remove menubar, toolbar, left and right scrollbars
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
endif

" Change directories of temporary files
if has('win32')
    set backupdir=~/vimfiles/backup//
    set directory=~/vimfiles/swap//
    set undodir=~/vimfiles/undo//
else
    set backupdir=~/.vim/backup//
    set directory=~/.vim/swap//
    set undodir=~/.vim/undo//
endif

" Display relative line numbers
set relativenumber

" Show the line number of the current line
set number

" Allow backspacing over autoindent, line breaks and the start of insert
set backspace=indent,eol,start

" One step of indent is 4 spaces
set shiftwidth=4

" A <Tab> or <BS> counts for 4 spaces
set softtabstop=4

" Use an appropriate amount of spaces to insert <Tab>
set expandtab

" Copy indent from current line when starting a new line
set autoindent

" Use 2 spaces in Ruby
augroup ruby_indentation
    autocmd!

    autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2
augroup end

" Required to show custom list symbols
set encoding=utf-8

" Change symbols for invisible characters
set listchars=eol:¬,tab:▸\ ,trail:·,precedes:←,extends:→

" Set leader to space
let mapleader=" "

" Set localleader to \
let maplocalleader="\\"

" Leader mappings
nnoremap <leader>e :browse edit<CR>
nnoremap <leader>w :write<CR>
nnoremap <leader>r :source $MYVIMRC<CR>
nnoremap <leader>l :set list!<CR>
nnoremap <leader>h :set hlsearch!<CR>
nnoremap <leader>= :call <SID>Preserve("normal gg=G")<CR>
nnoremap <leader>b :ls<CR>:b<SPACE>
nnoremap <leader>d :ls<CR>:bd<SPACE>
nnoremap <leader>c :lcd %:h<CR>

if has ('win32')
    nnoremap <leader>v :edit ~/dotfiles/vim/vimrc<CR>
else
    nnoremap <leader>v :edit ~/.dotfiles/vim/vimrc<CR>
endif

" Fugitive mappings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gc :Glcd<CR>

" Easy align mappings
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" Make mapping
nnoremap <F7> :make<CR>

" Function to set make mappings correctly
function! SetMakeMappings()
    " Check if a file named "Makefile" exists in the directory of the current
    " buffer
    if filereadable(expand("%:p:h") . "/Makefile")
        set makeprg=make
        nnoremap <F5> :make debug<CR>
        nnoremap <F6> :make run<CR>
    else
        if has('win32')
            set makeprg=build-system\build
            nnoremap <F5> :make<CR>:silent !build-system\debug<CR>
            nnoremap <F6> :make<CR>:silent !build-system\run<CR>
        else
            set makeprg=./build-system/build.sh
            nnoremap <F5> :make<CR>:silent !./build-system/debug.sh<CR>
            nnoremap <F6> :make<CR>:silent !./build-system/run.sh<CR>
        end
    endif
endfunction

" Update make mappings autocmd
augroup update_make_mappings
    autocmd!

    autocmd BufWinEnter * call SetMakeMappings()
augroup end

" Function to preserve "state" and execute command
" (Source: http://vimcasts.org/episodes/tidying-whitespace/)
function! <SID>Preserve(command)
    " Preparation: save last search, and cursor position.
    let l:win_view = winsaveview()
    let l:last_search = getreg('/')
    " Execute the command without adding to the
    " changelist/jumplist:
    execute 'keepjumps ' . a:command
    " Clean up: restore previous search history, and
    " cursor position
    call winrestview(l:win_view)
    call setreg('/', l:last_search)
endfunction

augroup strip_whitespace
    autocmd!

    " Automatically strip whitespace when saving file
    autocmd BufWritePre * :call<SID>Preserve("%s/\\s\\+$//e")
augroup end

" When searching, show where the pattern typed so far matches
set incsearch

" Always display statusline
set laststatus=2

" Configure statusline
set statusline=                             " clear statusline for when vimrc is reloaded
set statusline+=%f                          " path to file in the buffer
set statusline+=%(\ %h%)                    " help flag: [Help] or empty
set statusline+=%(\ %m%)                    " modified flag: [+] or [-] or empty
set statusline+=%(\ %r%)                    " readonly flag: [RO] or empty
set statusline+=%(\ (%{fugitive#head()})%)  " current branch
set statusline+=%=                          " right align
set statusline+=\ Line:\ %l/%L              " current line and total number of lines
set statusline+=\ Col:\ %c                  " column number

" Enable enhanced command-line completion
set wildmenu

" Always show at least 5 lines above and below the cursor
set scrolloff=5

" Always show at least 5 columns left and right of the cursor
set sidescrolloff=5

" Show as much as possible of the last line in a window
set display+=lastline

" Delete comment character when joining commented lines
set formatoptions+=j

augroup no_continue_comment
    autocmd!

    " Don't automatically continue comment when pressing enter
    autocmd FileType * setlocal formatoptions-=r
augroup end

" Set shell to cmd.exe (this is needed to run vim as difftool in git for
" windows)
if has('win32')
    set shell=C:\WINDOWS\system32\cmd.exe
endif

" When a file has been changed outside of Vim, but it has not been changed
" inside of Vim, automatically read it again
set autoread

" Allow undoing C-u and C-w in insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Enable timeout on key codes
set ttimeout

" Wait 100 ms for a key code or mapped key sequence to complete
set ttimeoutlen=100

" Don't look in included files for completion
set complete-=i

" Don't consider octal numbers for CTRL-A and CTRL-X
set nrformats-=octal

" Remember 200 lines of command line history
set history=200

" Don't use Ex mode. Use Q for formatting instead
nnoremap Q gq

" Allow hiding buffers with unsaved changes
set hidden

" Don't update the display while executing macros
set lazyredraw

" Show current mode
set showmode

" Show currently typed command
set showcmd

" UltiSnips configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" Ignore case when searching...
set ignorecase

" ... except when the pattern contains uppercase letters
set smartcase

" Use LaTeX by default
let g:tex_flavor="latex"

" Use SumatraPDF in Windows
if has('win32')
    let g:vimtex_view_general_viewer='SumatraPDF'
    let g:vimtex_view_general_options='-reuse-instance -forward-search @tex @line @pdf'
    let g:vimtex_view_general_options_latexmk='-reuse-instance'
endif

" Required to make vimtex latexmk callback work
" (See :h vimtex-faq-windows)
if has('win32')
    let g:vimtex_compiler_progname=v:progname
endif

" Disable vimtex latexmk callback in terminal Vim.
" Generally, terminal Vim is not compiled with
" +clientserver, so this callback wouldn't work anyway.
" Even if it is, you would need to set servername explicitly,
" since terminal Vim doesn't automatically generate a servername
" on startup.
if !has('gui_running')
    let g:vimtex_compiler_latexmk = { 'callback' : 0 }
endif

